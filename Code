import pygame
import random
pygame.init()

screen = pygame.display.set_mode((800, 600)) #game window
pygame.display.set_caption("Flappy Bird")#Game window title
clock = pygame.time.Clock() #handles FPS
font = pygame.font.Font(None, 36) #Font for displaing the score
font2 = pygame.font.Font(None, 72) #larger font

score = 0 #score variable

running = True

# Bird class
class Bird:
    def __init__(self):
        self.y = 400
        self.velocity = 0
        
    def flap(self):
        self.velocity = -3 # flap
        
    def physics(self):
        self.velocity += 0.1 #Gravity
        self.y += self.velocity
        
    def draw(self):
       pygame.draw.rect(screen, (255, 0, 0), (50, self.y, 30, 30))
       
bird = Bird()       
#Pipe Class
class Pipe:
    def __init__(self, x):
        self.x = x
        self.height = random.randint(50, 400)
        self.gap = 150  # Gap size between top and bottom pipes
        self.top_pipe = pygame.transform.flip(pipe_image, False, True)
        self.bottom_pipe = pipe_image

    def move(self):
        self.x -= 2  # Move pipes to the left

    def draw(self):
        # Calculate the top and bottom positions
        top_height = self.height
        bottom_height = 800 - (self.height + self.gap)

        # Draw the top pipe
        screen.blit(self.top_pipe, (self.x, top_height - self.top_pipe.get_height()))
        # Draw the bottom pipe
        screen.blit(self.bottom_pipe, (self.x, self.height + self.gap))

pipes = []
spawn_pipe = 0 #timer for pipe spawn

def check_collision(bx, by, px, py):
    #TOP PIPE CHECK
    if bx + 30 > px and bx < px + 50 and by < py:
        return True
    #BOTTOM PIPE CHECK
    if bx + 30 > px and bx < px + 50 and by + 30 > py + 150:
        return True
    return False

ticker = 0
while running: #Game loop ===========================================================
    clock.tick(60)
    ticker+=1 #increment score timer
    if ticker%10 == 0: #every 10 frames reset
        ticker = 0 #reset timer
        score+=1 #increment score
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        if event.type == pygame.MOUSEBUTTONDOWN:
            bird.flap()
            
            
   #spawn pipes
    spawn_pipe += 1 #increment timer
    if spawn_pipe >= 150: #pipe is spawned every 150 frames
       pipes.append(Pipe(800))#this INSTIGATES a new pipe and puts it in the list!
       spawn_pipe = 0 #reset timer
   
   #Move pipes!
    for pipe in pipes: #walk through list of pipes
        pipe.move() #Move each pipe
        if check_collision(50, bird.y, pipe.x, pipe.height): #check collision with brid
            running = False #Kill game is you hit a pipe
            
    #Destroy pipes that have gone off screen
    i = len(pipes) - 1
    while i >= 0:
        if pipes[i].x <= -50:
            pipes.pop(i)
            
    bird.physics()
   # Render section ------------------------------------------
    screen.fill((0, 0, 0))
    bird.draw()
    for pipe in pipes:
        pipe.draw()
    
    score_text = font.render("Score:", True, (255, 255, 255))
    screen.blit(score_text, (650, 20)) # Position the score in the top-right corner
    score_text2 = font.render(str(score), True, (255, 255, 255))
    screen.blit(score_text2, (750, 20)) #Position the score in the top-right corner
    
    pygame.display.flip()
    
#end of game loop ---------------------------------------------------------------------
    
text = font2.render("GAME OVER", True, (255, 50,50))
screen.blit(text, (200, 200)) #position the score in the top-right
pygame.display.flip() 
pygame.time.delay(2000) #Delay in milliseconds
pygame.quit()
